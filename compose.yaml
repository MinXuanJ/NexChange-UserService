#<<<<<<< HEAD
version: '3'
services:
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: NexChangeUserDB
      MYSQL_USER: user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    networks:
      - backend


  kafka:
    image: wurstmeister/kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - backend
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - backend
  redis:
    image: redis:5
    ports:
      - "6379:6379"
    networks:
      - backend

  userservice:
    build: .
    environment:
      - DB_HOST=mysql
      - DB_NAME=NexChangeUserDB
      - DB_USER=root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=redis
      - KAFKA_SERVERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge
#=======
#services:
#  redis:
#    image: "redis:latest"
#    container_name: "redis-server"
#    ports:
#      - "6379:6379"
#    networks:
#      - redis-network
#    volumes:
#      - redis-data:/data
#  zookeeper:
#    image: wurstmeister/zookeeper:3.4.6
#    container_name: zookeeper
#    ports:
#        - "2181:2181"
#  kafka:
#    image: wurstmeister/kafka:2.13-2.7.0
#    container_name: kafka
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#
#networks:
#  redis-network:
#    driver: bridge
#
#volumes:
#  redis-data:
#
#>>>>>>> origin/master
